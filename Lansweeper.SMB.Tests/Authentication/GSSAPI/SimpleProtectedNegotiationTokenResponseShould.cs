using Lansweeper.Smb.Authentication.GSSAPI;
using Lansweeper.Smb.Authentication.GSSAPI.SPNEGO;

namespace Lansweeper.SMB.Tests.Authentication.GSSAPI;

internal class SimpleProtectedNegotiationTokenResponseShould
{
    [Test]
    public void ConstructPropertiesCorrectlyFromBuffer()
    {
        byte[] responseToken = [
          0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00,
          0x02, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x1e, 0x00,
          0x38, 0x00, 0x00, 0x00, 0x15, 0x82, 0x8a, 0xe2,
          0x0e, 0x71, 0xb4, 0x7d, 0xa4, 0x8a, 0x95, 0xb9,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x98, 0x00, 0x98, 0x00, 0x56, 0x00, 0x00, 0x00,
          0x0a, 0x00, 0x5a, 0x29, 0x00, 0x00, 0x00, 0x0f,
          0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00,
          0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00,
          0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00,
          0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x02, 0x00,
          0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00,
          0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00,
          0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00,
          0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00,
          0x01, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00,
          0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00,
          0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00,
          0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00,
          0x51, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x44, 0x00,
          0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00,
          0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00,
          0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00,
          0x55, 0x00, 0x51, 0x00, 0x03, 0x00, 0x1e, 0x00,
          0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00,
          0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00,
          0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00,
          0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x07, 0x00,
          0x08, 0x00, 0x78, 0xa7, 0xed, 0x21, 0x85, 0x27,
          0xd2, 0x01, 0x00, 0x00, 0x00, 0x00
        ];

        byte[] buffer = [
          0xa1, 0x82, 0x01, 0x0b, 0x30, 0x82, 0x01, 0x07,
          0xa0, 0x03, 0x0a, 0x01, 0x01, 0xa1, 0x0c, 0x06,
          0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37,
          0x02, 0x02, 0x0a, 0xa2, 0x81, 0xf1, 0x04, 0x81,
          0xee, 
          ..responseToken
        ];

        SimpleProtectedNegotiationTokenResponse sut = new(buffer);

        sut.NegState.Should().Be(NegState.AcceptIncomplete);
        sut.SupportedMechanism.Should().Equal(GssIdentifiers.NTLMSSPIdentifier);
        sut.ResponseToken.Should().Equal(responseToken);
        sut.MechanismListMIC.Should().BeNullOrEmpty();
    }


    [Test]
    public void GetBytesCorrectly()
    {
        byte[] responseToken = [
          0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00,
          0x02, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x1e, 0x00,
          0x38, 0x00, 0x00, 0x00, 0x15, 0x82, 0x8a, 0xe2,
          0x0e, 0x71, 0xb4, 0x7d, 0xa4, 0x8a, 0x95, 0xb9,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x98, 0x00, 0x98, 0x00, 0x56, 0x00, 0x00, 0x00,
          0x0a, 0x00, 0x5a, 0x29, 0x00, 0x00, 0x00, 0x0f,
          0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00,
          0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00,
          0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00,
          0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x02, 0x00,
          0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00,
          0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00,
          0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00,
          0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00,
          0x01, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00,
          0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00,
          0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00,
          0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00,
          0x51, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x44, 0x00,
          0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00,
          0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00,
          0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00,
          0x55, 0x00, 0x51, 0x00, 0x03, 0x00, 0x1e, 0x00,
          0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00,
          0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00,
          0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00,
          0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x07, 0x00,
          0x08, 0x00, 0x78, 0xa7, 0xed, 0x21, 0x85, 0x27,
          0xd2, 0x01, 0x00, 0x00, 0x00, 0x00
        ];

        byte[] buffer = [
          0xa1, 0x82, 0x01, 0x0b, 0x30, 0x82, 0x01, 0x07,
          0xa0, 0x03, 0x0a, 0x01, 0x01, 0xa1, 0x0c, 0x06,
          0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37,
          0x02, 0x02, 0x0a, 0xa2, 0x81, 0xf1, 0x04, 0x81,
          0xee, 
          ..responseToken
        ];

        SimpleProtectedNegotiationTokenResponse sut = new()
        {
            NegState = NegState.AcceptIncomplete,
            SupportedMechanism = GssIdentifiers.NTLMSSPIdentifier,
            ResponseToken = responseToken
        };

        byte[] actualBytes = sut.GetBytes();

        actualBytes.Should().BeEquivalentTo(buffer);
    }
}
