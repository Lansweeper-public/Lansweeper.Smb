using Lansweeper.Smb.Authentication.GSSAPI.SPNEGO;

namespace Lansweeper.SMB.Tests.Authentication.GSSAPI;

internal class SimpleProtectedNegotiationTokenShould
{
    [Test] // smb-on-windows-10.pcapng: message 858
    public void ReadTokenAndCreateNegTokenInit()
    {
        byte[] buffer = [
          0x60, 0x48, 0x06, 0x06, 0x2b, 0x06, 0x01, 0x05,
          0x05, 0x02, 0xa0, 0x3e, 0x30, 0x3c, 0xa0, 0x0e,
          0x30, 0x0c, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04,
          0x01, 0x82, 0x37, 0x02, 0x02, 0x0a, 0xa2, 0x2a,
          0x04, 0x28, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53,
          0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0x97, 0x82,
          0x08, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x0a, 0x00, 0x5a, 0x29, 0x00, 0x00,
          0x00, 0x0f
        ];

        SimpleProtectedNegotiationToken? result = SimpleProtectedNegotiationToken.ReadToken(buffer, false);

        result.Should().NotBeNull().
            And.BeOfType<SimpleProtectedNegotiationTokenInit>();
    }

    [Test] // smb-on-windows-10.pcapng: message 859
    public void ReadTokenAndCreateNegTokenResp()
    {
        byte[] buffer = [
          0xa1, 0x82, 0x01, 0x0b, 0x30, 0x82, 0x01, 0x07,
          0xa0, 0x03, 0x0a, 0x01, 0x01, 0xa1, 0x0c, 0x06,
          0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37,
          0x02, 0x02, 0x0a, 0xa2, 0x81, 0xf1, 0x04, 0x81,
          0xee, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50,
          0x00, 0x02, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x1e,
          0x00, 0x38, 0x00, 0x00, 0x00, 0x15, 0x82, 0x8a,
          0xe2, 0x78, 0xf8, 0xf6, 0x20, 0x6e, 0x88, 0x25,
          0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x98, 0x00, 0x98, 0x00, 0x56, 0x00, 0x00,
          0x00, 0x0a, 0x00, 0x5a, 0x29, 0x00, 0x00, 0x00,
          0x0f, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b,
          0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d,
          0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41,
          0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x02,
          0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53,
          0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50,
          0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46,
          0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51,
          0x00, 0x01, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45,
          0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f,
          0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31,
          0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55,
          0x00, 0x51, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x44,
          0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54,
          0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56,
          0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30,
          0x00, 0x55, 0x00, 0x51, 0x00, 0x03, 0x00, 0x1e,
          0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b,
          0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d,
          0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41,
          0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x07,
          0x00, 0x08, 0x00, 0x0b, 0xd7, 0xd7, 0x87, 0x85,
          0x27, 0xd2, 0x01, 0x00, 0x00, 0x00, 0x00
        ];


        SimpleProtectedNegotiationToken? result = SimpleProtectedNegotiationToken.ReadToken(buffer, false);

        result.Should().NotBeNull().
            And.BeOfType<SimpleProtectedNegotiationTokenResponse>();
    }

    // TODO test init2

    // TODO test response
}
