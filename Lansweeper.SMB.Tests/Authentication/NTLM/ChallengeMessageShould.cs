using Lansweeper.Smb.Authentication.NTLM;
using Lansweeper.Smb.Utilities;
using System.Text;

namespace Lansweeper.SMB.Tests.Authentication.NTLM;

internal class ChallengeMessageShould
{
    [Test]
    public void ConstructPropertiesCorrectlyFromBuffer()
    {
        byte[] serverChallenge = [0x0e, 0x71, 0xb4, 0x7d, 0xa4, 0x8a, 0x95, 0xb9];

        byte[] buffer = [
          0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00,
          0x02, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x1e, 0x00,
          0x38, 0x00, 0x00, 0x00, 0x15, 0x82, 0x8a, 0xe2,
          ..serverChallenge,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x98, 0x00, 0x98, 0x00, 0x56, 0x00, 0x00, 0x00,
          0x0a, 0x00, 0x5a, 0x29, 0x00, 0x00, 0x00, 0x0f,
          0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00,
          0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00,
          0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00,
          0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x02, 0x00,
          0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00,
          0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00,
          0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00,
          0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00,
          0x01, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00,
          0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00,
          0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00,
          0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00,
          0x51, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x44, 0x00,
          0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00,
          0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00,
          0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00,
          0x55, 0x00, 0x51, 0x00, 0x03, 0x00, 0x1e, 0x00,
          0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00,
          0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00,
          0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00,
          0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x07, 0x00,
          0x08, 0x00, 0x78, 0xa7, 0xed, 0x21, 0x85, 0x27,
          0xd2, 0x01, 0x00, 0x00, 0x00, 0x00
        ];

        DateTime expectedTimeStamp = new DateTime(2016, 10, 16, 8, 13, 10, 52, 236, DateTimeKind.Utc);
        byte[] expectedTimeStampBytes = new byte[8];
        LittleEndianWriter.WriteFileTime(expectedTimeStampBytes, expectedTimeStamp);

        ChallengeMessage sut = new(buffer);

        sut.Signature.Should().Be("NTLMSSP\0");
        sut.MessageType.Should().Be(MessageTypeName.Challenge);
        sut.TargetName.Should().Be("DESKTOP-V1FA0UQ");
        sut.NegotiateFlags.Should().Be(NegotiateFlags.UnicodeEncoding | NegotiateFlags.TargetNameSupplied
            | NegotiateFlags.Sign | NegotiateFlags.NTLMSessionSecurity | NegotiateFlags.AlwaysSign | NegotiateFlags.TargetTypeServer
            | NegotiateFlags.ExtendedSessionSecurity | NegotiateFlags.TargetInfo | NegotiateFlags.Version | NegotiateFlags.Use128BitEncryption
            | NegotiateFlags.KeyExchange | NegotiateFlags.Use56BitEncryption);
        sut.ServerChallenge.Should().Equal(serverChallenge);
        sut.TargetInfo.Should().HaveCount(5);
        sut.TargetInfo[0].Key.Should().Be(AVPairKey.NbDomainName);
        sut.TargetInfo[0].Value.Should().Equal(Encoding.Unicode.GetBytes("DESKTOP-V1FA0UQ"));
        sut.TargetInfo[1].Key.Should().Be(AVPairKey.NbComputerName);
        sut.TargetInfo[1].Value.Should().Equal(Encoding.Unicode.GetBytes("DESKTOP-V1FA0UQ"));
        sut.TargetInfo[2].Key.Should().Be(AVPairKey.DnsDomainName);
        sut.TargetInfo[2].Value.Should().Equal(Encoding.Unicode.GetBytes("DESKTOP-V1FA0UQ"));
        sut.TargetInfo[3].Key.Should().Be(AVPairKey.DnsComputerName);
        sut.TargetInfo[3].Value.Should().Equal(Encoding.Unicode.GetBytes("DESKTOP-V1FA0UQ"));
        sut.TargetInfo[4].Key.Should().Be(AVPairKey.Timestamp);
        sut.TargetInfo[4].Value.Should().Equal(expectedTimeStampBytes);

        sut.Version.Should().BeEquivalentTo(new NtlmVersion(10, 0, 10586, 15));
    }

    [Test]
    public void GetBytesCorrectly()
    {
        byte[] serverChallenge = [0x0e, 0x71, 0xb4, 0x7d, 0xa4, 0x8a, 0x95, 0xb9];

        byte[] expectedBytes = [
          0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00,
          0x02, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x1e, 0x00,
          0x38, 0x00, 0x00, 0x00, 0x15, 0x82, 0x8a, 0xe2,
          ..serverChallenge,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x98, 0x00, 0x98, 0x00, 0x56, 0x00, 0x00, 0x00,
          0x0a, 0x00, 0x5a, 0x29, 0x00, 0x00, 0x00, 0x0f,
          0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00,
          0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00,
          0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00,
          0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x02, 0x00,
          0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00,
          0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00,
          0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00,
          0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00,
          0x01, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00,
          0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00,
          0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00,
          0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00,
          0x51, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x44, 0x00,
          0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00,
          0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00,
          0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00,
          0x55, 0x00, 0x51, 0x00, 0x03, 0x00, 0x1e, 0x00,
          0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00,
          0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00,
          0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00,
          0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x07, 0x00,
          0x08, 0x00, 0x78, 0xa7, 0xed, 0x21, 0x85, 0x27,
          0xd2, 0x01, 0x00, 0x00, 0x00, 0x00
        ];

        DateTime timeStamp = new(2016, 10, 16, 8, 13, 10, 52, 236, DateTimeKind.Utc);
        byte[] timeStampBytes = new byte[8];
        LittleEndianWriter.WriteFileTime(timeStampBytes, timeStamp);

        ChallengeMessage sut = new()
        {
            TargetName = "DESKTOP-V1FA0UQ",
            NegotiateFlags = NegotiateFlags.UnicodeEncoding
                | NegotiateFlags.Sign | NegotiateFlags.NTLMSessionSecurity | NegotiateFlags.AlwaysSign | NegotiateFlags.TargetTypeServer
                | NegotiateFlags.ExtendedSessionSecurity | NegotiateFlags.Use128BitEncryption
                | NegotiateFlags.KeyExchange | NegotiateFlags.Use56BitEncryption,
            ServerChallenge = serverChallenge,
            TargetInfo = new KeyValuePairList<AVPairKey, byte[]>
            {
                { AVPairKey.NbDomainName, Encoding.Unicode.GetBytes("DESKTOP-V1FA0UQ") },
                { AVPairKey.NbComputerName, Encoding.Unicode.GetBytes("DESKTOP-V1FA0UQ") },
                { AVPairKey.DnsDomainName, Encoding.Unicode.GetBytes("DESKTOP-V1FA0UQ") },
                { AVPairKey.DnsComputerName, Encoding.Unicode.GetBytes("DESKTOP-V1FA0UQ") },
                { AVPairKey.Timestamp, timeStampBytes }
            },
            Version = new NtlmVersion(10, 0, 10586, 15),
        };

        byte[] actualBytes = sut.GetBytes();

        actualBytes.Should().Equal(expectedBytes);
    }
}
