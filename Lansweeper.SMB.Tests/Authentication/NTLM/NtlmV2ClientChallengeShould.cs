using Lansweeper.Smb.Authentication.NTLM;
using Lansweeper.Smb.Utilities;
using System.Text;

namespace Lansweeper.SMB.Tests.Authentication.NTLM;

internal class NtlmV2ClientChallengeShould
{
    [Test]
    public void ConstructPropertiesCorrectlyFromBuffer()
    {
        byte[] clientChallenge = [0x0c, 0xf8, 0x76, 0xf0, 0x8a, 0x0b, 0x3b, 0xfa];

        byte[] flags = [0x02, 0x00, 0x00, 0x00];

        byte[] restrictions = [
          0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
          0xad, 0x86, 0x5b, 0x6d, 0x08, 0xa9, 0x5d, 0x0e,
          0x76, 0xa9, 0x4e, 0x2c, 0xa0, 0x13, 0xab, 0x3f,
          0x69, 0xc4, 0xfd, 0x94, 0x5c, 0xca, 0x01, 0xb2,
          0x77, 0x70, 0x0f, 0xd2, 0xb3, 0x05, 0xca, 0x01
        ];

        byte[] buffer = [
          0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x78, 0xa7, 0xed, 0x21, 0x85, 0x27, 0xd2, 0x01,
          ..clientChallenge,
          0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x1e, 0x00,
          0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00,
          0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00,
          0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00,
          0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x01, 0x00,
          0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00,
          0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00,
          0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00,
          0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00,
          0x04, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00,
          0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00,
          0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00,
          0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00,
          0x51, 0x00, 0x03, 0x00, 0x1e, 0x00, 0x44, 0x00,
          0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00,
          0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00,
          0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00,
          0x55, 0x00, 0x51, 0x00, 0x07, 0x00, 0x08, 0x00,
          0x78, 0xa7, 0xed, 0x21, 0x85, 0x27, 0xd2, 0x01,
          0x06, 0x00, 0x04, 0x00,
            ..flags,
          0x08, 0x00, 0x30, 0x00,
          ..restrictions,
            0x0a, 0x00, 0x10, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x09, 0x00, 0x28, 0x00, 0x63, 0x00, 0x69, 0x00,
          0x66, 0x00, 0x73, 0x00, 0x2f, 0x00, 0x31, 0x00,
          0x39, 0x00, 0x32, 0x00, 0x2e, 0x00, 0x31, 0x00,
          0x36, 0x00, 0x38, 0x00, 0x2e, 0x00, 0x31, 0x00,
          0x39, 0x00, 0x39, 0x00, 0x2e, 0x00, 0x31, 0x00,
          0x33, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];

        DateTime expectedTimeStamp = new(2016, 10, 16, 8, 13, 10, 52, 236, DateTimeKind.Utc);
        byte[] expectedTimeStampBytes = new byte[8];
        LittleEndianWriter.WriteFileTime(expectedTimeStampBytes, expectedTimeStamp);

        NtlmV2ClientChallenge sut = new(buffer);

        sut.CurrentVersion.Should().Be(1);
        sut.MaximumSupportedVersion.Should().Be(1);
        sut.Reserved1.Should().Be(0);
        sut.Reserved2.Should().Be(0);
        sut.TimeStamp.Should().Be(expectedTimeStamp);
        sut.ClientChallenge.Should().Equal(clientChallenge);
        sut.Reserved3.Should().Be(0);
        sut.AVPairs.Count.Should().Be(9);
        sut.AVPairs[0].Key.Should().Be(AVPairKey.NbDomainName);
        sut.AVPairs[0].Value.Should().Equal(Encoding.Unicode.GetBytes("DESKTOP-V1FA0UQ"));
        sut.AVPairs[1].Key.Should().Be(AVPairKey.NbComputerName);
        sut.AVPairs[1].Value.Should().Equal(Encoding.Unicode.GetBytes("DESKTOP-V1FA0UQ"));
        sut.AVPairs[2].Key.Should().Be(AVPairKey.DnsDomainName);
        sut.AVPairs[2].Value.Should().Equal(Encoding.Unicode.GetBytes("DESKTOP-V1FA0UQ"));
        sut.AVPairs[3].Key.Should().Be(AVPairKey.DnsComputerName);
        sut.AVPairs[3].Value.Should().Equal(Encoding.Unicode.GetBytes("DESKTOP-V1FA0UQ"));
        sut.AVPairs[4].Key.Should().Be(AVPairKey.Timestamp);
        sut.AVPairs[4].Value.Should().Equal(expectedTimeStampBytes);
        sut.AVPairs[5].Key.Should().Be(AVPairKey.Flags);
        sut.AVPairs[5].Value.Should().Equal(flags);
        sut.AVPairs[6].Key.Should().Be(AVPairKey.SingleHost);
        sut.AVPairs[6].Value.Should().Equal(restrictions);
        sut.AVPairs[7].Key.Should().Be(AVPairKey.ChannelBindings);
        sut.AVPairs[7].Value.Should().Equal(new byte[16]);
        sut.AVPairs[8].Key.Should().Be(AVPairKey.TargetName);
        sut.AVPairs[8].Value.Should().Equal(Encoding.Unicode.GetBytes("cifs/192.168.199.133"));
    }

    [Test]
    public void GetBytesCorrectly()
    {
        byte[] clientChallenge = [0x0c, 0xf8, 0x76, 0xf0, 0x8a, 0x0b, 0x3b, 0xfa];

        byte[] flags = [0x02, 0x00, 0x00, 0x00];

        byte[] restrictions = [
          0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x01, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
          0xad, 0x86, 0x5b, 0x6d, 0x08, 0xa9, 0x5d, 0x0e,
          0x76, 0xa9, 0x4e, 0x2c, 0xa0, 0x13, 0xab, 0x3f,
          0x69, 0xc4, 0xfd, 0x94, 0x5c, 0xca, 0x01, 0xb2,
          0x77, 0x70, 0x0f, 0xd2, 0xb3, 0x05, 0xca, 0x01
        ];

        byte[] expectedBytes = [
          0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x78, 0xa7, 0xed, 0x21, 0x85, 0x27, 0xd2, 0x01,
          ..clientChallenge,
          0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x1e, 0x00,
          0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00,
          0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00,
          0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00,
          0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x01, 0x00,
          0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00,
          0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00,
          0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00,
          0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00,
          0x04, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00,
          0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00,
          0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00,
          0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00,
          0x51, 0x00, 0x03, 0x00, 0x1e, 0x00, 0x44, 0x00,
          0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00,
          0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00,
          0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00,
          0x55, 0x00, 0x51, 0x00, 0x07, 0x00, 0x08, 0x00,
          0x78, 0xa7, 0xed, 0x21, 0x85, 0x27, 0xd2, 0x01,
          0x06, 0x00, 0x04, 0x00,
            ..flags,
          0x08, 0x00, 0x30, 0x00,
          ..restrictions,
            0x0a, 0x00, 0x10, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x09, 0x00, 0x28, 0x00, 0x63, 0x00, 0x69, 0x00,
          0x66, 0x00, 0x73, 0x00, 0x2f, 0x00, 0x31, 0x00,
          0x39, 0x00, 0x32, 0x00, 0x2e, 0x00, 0x31, 0x00,
          0x36, 0x00, 0x38, 0x00, 0x2e, 0x00, 0x31, 0x00,
          0x39, 0x00, 0x39, 0x00, 0x2e, 0x00, 0x31, 0x00,
          0x33, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00,
        ];

        DateTime timeStamp = new(2016, 10, 16, 8, 13, 10, 52, 236, DateTimeKind.Utc);
        byte[] timeStampBytes = new byte[8];
        LittleEndianWriter.WriteFileTime(timeStampBytes, timeStamp);

        NtlmV2ClientChallenge sut = new()
        {
            TimeStamp = timeStamp,
            ClientChallenge = clientChallenge,
            AVPairs = new()
            {
                { AVPairKey.NbDomainName, Encoding.Unicode.GetBytes("DESKTOP-V1FA0UQ") },
                { AVPairKey.NbComputerName, Encoding.Unicode.GetBytes("DESKTOP-V1FA0UQ") },
                { AVPairKey.DnsDomainName, Encoding.Unicode.GetBytes("DESKTOP-V1FA0UQ") },
                { AVPairKey.DnsComputerName, Encoding.Unicode.GetBytes("DESKTOP-V1FA0UQ") },
                { AVPairKey.Timestamp, timeStampBytes },
                { AVPairKey.Flags, flags },
                { AVPairKey.SingleHost, restrictions },
                { AVPairKey.ChannelBindings, new byte[16] },
                { AVPairKey.TargetName, Encoding.Unicode.GetBytes("cifs/192.168.199.133") },
            }
        };

        byte[] actualBytes = sut.GetBytes();

        actualBytes.Should().Equal(expectedBytes);
    }
}
