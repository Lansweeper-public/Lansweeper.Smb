using Lansweeper.Smb.Enums;
using Lansweeper.Smb.SMB1;
using Lansweeper.Smb.SMB1.Commands;
using Lansweeper.Smb.SMB1.Enums;

namespace Lansweeper.SMB.Tests.SMB1;

internal class Smb1MessageShould
{
    [Test]
    public void ConstructPropertiesCorrectlyFromBuffer()
    {
        // Arrange
        byte[] buffer = [
          0xff, 0x53, 0x4d, 0x42, 0x73, 0x00, 0x00, 0x00,
          0x00, 0x08, 0x03, 0xc8, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x43, 0x79, 0x00, 0x00, 0x02, 0x00,
          0x0c, 0xff, 0x00, 0x00, 0x00, 0x00, 0x30, 0x32,
          0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a,
          0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xe3, 0x03,
          0x80, 0x99, 0x00, 0x60, 0x48, 0x06, 0x06, 0x2b,
          0x06, 0x01, 0x05, 0x05, 0x02, 0xa0, 0x3e, 0x30,
          0x3c, 0xa0, 0x0e, 0x30, 0x0c, 0x06, 0x0a, 0x2b,
          0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x02, 0x02,
          0x0a, 0xa2, 0x2a, 0x04, 0x28, 0x4e, 0x54, 0x4c,
          0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00,
          0x00, 0x15, 0x02, 0x08, 0x60, 0x05, 0x00, 0x05,
          0x00, 0x20, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03,
          0x00, 0x25, 0x00, 0x00, 0x00, 0x56, 0x4e, 0x45,
          0x54, 0x33, 0x42, 0x4c, 0x55, 0x00, 0x55, 0x00,
          0x6e, 0x00, 0x69, 0x00, 0x78, 0x00, 0x00, 0x00,
          0x53, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x62, 0x00,
          0x61, 0x00, 0x20, 0x00, 0x33, 0x00, 0x2e, 0x00,
          0x39, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x2d, 0x00,
          0x53, 0x00, 0x56, 0x00, 0x4e, 0x00, 0x2d, 0x00,
          0x62, 0x00, 0x75, 0x00, 0x69, 0x00, 0x6c, 0x00,
          0x64, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x31, 0x00,
          0x35, 0x00, 0x37, 0x00, 0x32, 0x00, 0x00, 0x00,
          0x56, 0x00, 0x4e, 0x00, 0x45, 0x00, 0x54, 0x00, // holds non-standard Primary Domain at the end
          0x33, 0x00, 0x00, 0x00
        ];

        var expectedHeader = new Smb1Header()
        {
            Command = CommandName.SMB_COM_SESSION_SETUP_ANDX,
            Status = NTStatus.STATUS_SUCCESS,
            Flags = HeaderFlags.CaseInsensitive,
            Flags2 = HeaderFlags2.Unicode | HeaderFlags2.NTStatusCode | HeaderFlags2.ExtendedSecurity | HeaderFlags2.ExtendedAttributes | HeaderFlags2.LongNamesAllowed,
            SecurityFeatures = 0x0000000000000000,
            TID = 0,
            PID = 31043,
            UID = 0,
            MID = 2
        };

        // Act
        Smb1Message sut = new(buffer);

        // Assert
        sut.Header.Should().BeEquivalentTo(expectedHeader);
        sut.Commands.Should().HaveCount(1);
        sut.Commands[0].Should().BeOfType<SessionSetupAndXRequestExtended>()
            .Which.CommandName.Should().Be(CommandName.SMB_COM_SESSION_SETUP_ANDX);
    }

    [Test]
    public void WriteBytesCorrectly()
    {
        // Arrange
        byte[] expectedBytes = [
          // Header
          0xff, 0x53, 0x4d, 0x42, 0x73, 0x00, 0x00, 0x00,
          0x00, 0x08, 0x03, 0xc8, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x43, 0x79, 0x00, 0x00, 0x02, 0x00,
          // Commands
          0x0c, 0xff, 0x00, 0x00, 0x00, 0x00, 0x30, 0x32,
          0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4a,
          0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0xe3, 0x01,
          0x80, 0x8d, 0x00, 0x60, 0x48, 0x06, 0x06, 0x2b,
          0x06, 0x01, 0x05, 0x05, 0x02, 0xa0, 0x3e, 0x30,
          0x3c, 0xa0, 0x0e, 0x30, 0x0c, 0x06, 0x0a, 0x2b,
          0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x02, 0x02,
          0x0a, 0xa2, 0x2a, 0x04, 0x28, 0x4e, 0x54, 0x4c,
          0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00,
          0x00, 0x15, 0x02, 0x08, 0x60, 0x05, 0x00, 0x05,
          0x00, 0x20, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03,
          0x00, 0x25, 0x00, 0x00, 0x00, 0x56, 0x4e, 0x45,
          0x54, 0x33, 0x42, 0x4c, 0x55, 0x00, 0x55, 0x00,
          0x6e, 0x00, 0x69, 0x00, 0x78, 0x00, 0x00, 0x00,
          0x53, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x62, 0x00,
          0x61, 0x00, 0x20, 0x00, 0x33, 0x00, 0x2e, 0x00,
          0x39, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x2d, 0x00,
          0x53, 0x00, 0x56, 0x00, 0x4e, 0x00, 0x2d, 0x00,
          0x62, 0x00, 0x75, 0x00, 0x69, 0x00, 0x6c, 0x00,
          0x64, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x31, 0x00,
          0x35, 0x00, 0x37, 0x00, 0x32, 0x00, 0x00, 0x00,
        ];

        byte[] securityBlob = [
          0x60, 0x48, 0x06, 0x06, 0x2b, 0x06, 0x01, 0x05,
          0x05, 0x02, 0xa0, 0x3e, 0x30, 0x3c, 0xa0, 0x0e,
          0x30, 0x0c, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04,
          0x01, 0x82, 0x37, 0x02, 0x02, 0x0a, 0xa2, 0x2a,
          0x04, 0x28, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53,
          0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0x15, 0x02,
          0x08, 0x60, 0x05, 0x00, 0x05, 0x00, 0x20, 0x00,
          0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x25, 0x00,
          0x00, 0x00, 0x56, 0x4e, 0x45, 0x54, 0x33, 0x42,
          0x4c, 0x55
        ];

        Smb1Message sut = new()
        {
            Header = new Smb1Header()
            {
                Command = CommandName.SMB_COM_SESSION_SETUP_ANDX,
                Status = NTStatus.STATUS_SUCCESS,
                Flags = HeaderFlags.CaseInsensitive,
                Flags2 = HeaderFlags2.Unicode | HeaderFlags2.NTStatusCode | HeaderFlags2.ExtendedSecurity | HeaderFlags2.ExtendedAttributes | HeaderFlags2.LongNamesAllowed,
                SecurityFeatures = 0x0000000000000000,
                TID = 0,
                PID = 31043,
                UID = 0,
                MID = 2
            },
            Commands = [
                    new SessionSetupAndXRequestExtended() {
                        AndXCommand = CommandName.SMB_COM_NO_ANDX_COMMAND,
                        AndXOffset = 0,
                        MaxBufferSize = 12288,
                        MaxMpxCount = 50,
                        VcNumber = 1,
                        SessionKey = 0x00000000,
                        Capabilities = Capabilities.RawMode | Capabilities.Unicode | Capabilities.LargeFiles | Capabilities.NTSMB |
                                       Capabilities.RpcRemoteApi | Capabilities.NTStatusCode | Capabilities.Level2Oplocks | Capabilities.LockAndRead |
                                       Capabilities.NTFind | Capabilities.InfoLevelPassthrough | Capabilities.LargeRead | Capabilities.LargeWrite |
                                       Capabilities.LightWeightIO | Capabilities.ExtendedSecurity,
                        SecurityBlob = securityBlob,
                        NativeOS = "Unix",
                        NativeLanMan = "Samba 3.9.0-SVN-build-11572",
                    }
                ]
        };

        //Act
        byte[] actualBytes = sut.GetBytes();

        // Assert
        actualBytes.Should().Equal(expectedBytes);
    }
}