using Lansweeper.Smb.SMB1.Commands;
using Lansweeper.Smb.SMB1.Enums;

namespace Lansweeper.SMB.Tests.SMB1.Commands;

public class SessionSetupAndXRequestExtendedShould
{
    [Test]
    public void ConstructPropertiesCorrectly()
    {
        // Arrange
        var nativeOS = "Windows";
        var nativeLanMan = "LAN Manager";
        var securityBlob = new byte[] { 0x01, 0x02, 0x03, 0x04 };

        // Act
        var request = new SessionSetupAndXRequestExtended
        {
            NativeOS = nativeOS,
            NativeLanMan = nativeLanMan,
            SecurityBlob = securityBlob
        };

        // Assert
        request.NativeOS.Should().Be(nativeOS);
        request.NativeLanMan.Should().Be(nativeLanMan);
        request.SecurityBlob.Should().Equal(securityBlob);
    }

    [Test]
    public void ConstructPropertiesCorrectlyFromBuffer()
    {
        // Arrange
        byte[] securityBlob = [
            0x60, 0x4d, 0x06, 0x06, 0x2b,
            0x06, 0x01, 0x05, 0x05, 0x02, 0xa0, 0x43, 0x30,
            0x41, 0xa0, 0x0e, 0x30, 0x0c, 0x06, 0x0a, 0x2b,
            0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x02, 0x02,
            0x0a, 0xa2, 0x2f, 0x04, 0x2d, 0x4e, 0x54, 0x4c,
            0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x15, 0x82, 0x08, 0x60, 0x06, 0x00, 0x06,
            0x00, 0x20, 0x00, 0x00, 0x00, 0x07, 0x00, 0x07,
            0x00, 0x26, 0x00, 0x00, 0x00, 0x4d, 0x53, 0x48,
            0x4f, 0x4d, 0x45, 0x44, 0x48, 0x43, 0x50, 0x50,
            0x43, 0x33,
         ];

        byte[] buffer = [
            0x0c, // Word Count
            0xff, // AndXCommand
            0x00, // Reserved
            0x00, 0x00, // AndXOffset
            0xff, 0xff, // MaxBufferSize
            0x02, 0x00, // MaxMpxCount
            0x01, 0x00, // VcNumber
            0x00, 0x00, 0x00, 0x00, // SessionKey
            0x4f, 0x00, // SecurityBlobLength
            0x00, 0x00, 0x00, 0x00, // Reserved
            0x54, 0x00, 0x00, 0x80, // Capabilities
            0x65, 0x00, // ByteCount
            ..securityBlob,
            0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x78, 0x00, 0x00, 0x00, // Native OS
            0x53, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x62, 0x00, 0x61, 0x00, 0x00, 0x00 //Native LAN Manager
        ];


        // Act
        var sut = new SessionSetupAndXRequestExtended(buffer, true);

        // Assert
        sut.AndXCommand.Should().Be(CommandName.SMB_COM_NO_ANDX_COMMAND);
        sut.AndXReserved.Should().Be(0);
        sut.AndXOffset.Should().Be(0);
        sut.MaxBufferSize.Should().Be(65535);
        sut.MaxMpxCount.Should().Be(2);
        sut.VcNumber.Should().Be(1);
        sut.SessionKey.Should().Be(0x00000000);
        sut.Reserved.Should().Be(0);
        sut.Capabilities.Should().Be(Capabilities.Unicode | Capabilities.NTSMB | Capabilities.NTStatusCode | Capabilities.ExtendedSecurity);
        sut.SecurityBlob.Should().Equal(securityBlob);
        sut.NativeOS.Should().Be("Unix");
        sut.NativeLanMan.Should().Be("Samba");
    }

    [Test]
    public void ConstructPropertiesCorrectlyFromBufferWithASCII()
    {
        // Arrange
        byte[] securityBlob = [
            0xa1, 0x82, 0x01, 0x6d, 0x30, 0x82, 0x01, 0x69,
            0xa2, 0x82, 0x01, 0x65, 0x04, 0x82, 0x01, 0x61,
            0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50, 0x00,
            0x03, 0x00, 0x00, 0x00, 0x18, 0x00, 0x18, 0x00,
            0x40, 0x00, 0x00, 0x00, 0xb8, 0x00, 0xb8, 0x00,
            0x58, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00,
            0x10, 0x01, 0x00, 0x00, 0x1a, 0x00, 0x1a, 0x00,
            0x16, 0x01, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00,
            0x30, 0x01, 0x00, 0x00, 0x10, 0x00, 0x10, 0x00,
            0x50, 0x01, 0x00, 0x00, 0x15, 0x82, 0x88, 0xe2,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x08, 0xa0,
            0xd5, 0xa6, 0xf2, 0x80, 0x7f, 0xfc, 0xae, 0x10,
            0xff, 0x0c, 0xf8, 0x10, 0x49, 0x30, 0xac, 0x3d,
            0x6a, 0xc0, 0x98, 0xf6, 0x00, 0x46, 0x20, 0x4b,
            0x42, 0xaa, 0x99, 0x09, 0x95, 0x4e, 0x35, 0x95,
            0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x46, 0xfe, 0x95, 0xd1, 0xad, 0x7d, 0xd0, 0x01,
            0xff, 0x0c, 0xf8, 0x10, 0x49, 0x30, 0xac, 0x3d,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x00,
            0x4c, 0x00, 0x41, 0x00, 0x42, 0x00, 0x01, 0x00,
            0x06, 0x00, 0x44, 0x00, 0x43, 0x00, 0x33, 0x00,
            0x04, 0x00, 0x1a, 0x00, 0x6c, 0x00, 0x61, 0x00,
            0x62, 0x00, 0x2e, 0x00, 0x64, 0x00, 0x6f, 0x00,
            0x6d, 0x00, 0x61, 0x00, 0x69, 0x00, 0x6e, 0x00,
            0x2e, 0x00, 0x65, 0x00, 0x78, 0x00, 0x03, 0x00,
            0x22, 0x00, 0x64, 0x00, 0x63, 0x00, 0x33, 0x00,
            0x2e, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x62, 0x00,
            0x2e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x6d, 0x00,
            0x61, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x2e, 0x00,
            0x65, 0x00, 0x78, 0x00, 0x07, 0x00, 0x08, 0x00,
            0x46, 0xfe, 0x95, 0xd1, 0xad, 0x7d, 0xd0, 0x01,
            0x09, 0x00, 0x1c, 0x00, 0x63, 0x00, 0x69, 0x00,
            0x66, 0x00, 0x73, 0x00, 0x2f, 0x00, 0x31, 0x00,
            0x30, 0x00, 0x2e, 0x00, 0x31, 0x00, 0x30, 0x00,
            0x2e, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x32, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x4c, 0x00, 0x41, 0x00, 0x42, 0x00, 0x41, 0x00,
            0x64, 0x00, 0x6d, 0x00, 0x69, 0x00, 0x6e, 0x00,
            0x69, 0x00, 0x73, 0x00, 0x74, 0x00, 0x72, 0x00,
            0x61, 0x00, 0x74, 0x00, 0x6f, 0x00, 0x72, 0x00,
            0x54, 0x00, 0x48, 0x00, 0x45, 0x00, 0x48, 0x00,
            0x4f, 0x00, 0x53, 0x00, 0x54, 0x00, 0x4e, 0x00,
            0x41, 0x00, 0x4d, 0x00, 0x45, 0x00, 0x48, 0x00,
            0x45, 0x00, 0x52, 0x00, 0x45, 0x00, 0x58, 0x00,
            0x6f, 0xe3, 0x2a, 0x38, 0xba, 0xbe, 0xae, 0x5a,
            0x47, 0xc1, 0xba, 0xb0, 0x3a, 0xfc, 0x7b, 0xd7,
            0x00
        ];

        byte[] buffer = [
            0x0c, // Word Count
            0xff, // AndXCommand
            0x00, // Reserved 
            0x00, 0x00, // AndXOffset
            0xdf, 0xff, // MaxBufferSize
            0x02, 0x00, // MaxMpxCount
            0x01, 0x00, // VcNumber
            0x00, 0x00, 0x00, 0x00, // Session Key 
            0x71, 0x01, // SecurityBlobLength
            0x00, 0x00, 0x00, 0x00, // Reserved
            0x5c, 0xd0, 0x00, 0x80, // Capabilities
            0x94, 0x01, // ByteCount
            ..securityBlob, // SecurityBlob
            0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20,
            0x32, 0x30, 0x30, 0x30, 0x20, 0x32, 0x31, 0x39,
            0x35, 0x00, // Native OS
            0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20,
            0x32, 0x30, 0x30, 0x30, 0x20, 0x35, 0x2e, 0x30,
            0x00 // Native LAN Manager
        ];


        // Act
        var sut = new SessionSetupAndXRequestExtended(buffer, isUnicode: false);

        // Assert
        sut.AndXCommand.Should().Be(CommandName.SMB_COM_NO_ANDX_COMMAND);
        sut.AndXReserved.Should().Be(0);
        sut.AndXOffset.Should().Be(0);
        sut.MaxBufferSize.Should().Be(65503);
        sut.MaxMpxCount.Should().Be(2);
        sut.VcNumber.Should().Be(1);
        sut.SessionKey.Should().Be(0x00000000);
        sut.Reserved.Should().Be(0);
        sut.Capabilities.Should().Be(Capabilities.Unicode | Capabilities.LargeFiles | Capabilities.NTSMB | Capabilities.NTStatusCode | Capabilities.DFS | Capabilities.LargeRead | Capabilities.LargeWrite | Capabilities.ExtendedSecurity);
        sut.SecurityBlob.Should().Equal(securityBlob);
        sut.NativeOS.Should().Be("Windows 2000 2195");
        sut.NativeLanMan.Should().Be("Windows 2000 5.0");
    }

    [Test]
    public void GetBytesCorrectly()
    {
        // Arrange
        byte[] securityBlob = [
            0x60, 0x4d, 0x06, 0x06, 0x2b,
            0x06, 0x01, 0x05, 0x05, 0x02, 0xa0, 0x43, 0x30,
            0x41, 0xa0, 0x0e, 0x30, 0x0c, 0x06, 0x0a, 0x2b,
            0x06, 0x01, 0x04, 0x01, 0x82, 0x37, 0x02, 0x02,
            0x0a, 0xa2, 0x2f, 0x04, 0x2d, 0x4e, 0x54, 0x4c,
            0x4d, 0x53, 0x53, 0x50, 0x00, 0x01, 0x00, 0x00,
            0x00, 0x15, 0x82, 0x08, 0x60, 0x06, 0x00, 0x06,
            0x00, 0x20, 0x00, 0x00, 0x00, 0x07, 0x00, 0x07,
            0x00, 0x26, 0x00, 0x00, 0x00, 0x4d, 0x53, 0x48,
            0x4f, 0x4d, 0x45, 0x44, 0x48, 0x43, 0x50, 0x50,
            0x43, 0x33,
         ];

        SessionSetupAndXRequestExtended request = new()
        {
            AndXCommand = CommandName.SMB_COM_NO_ANDX_COMMAND,
            AndXOffset = 0,
            MaxBufferSize = 65535,
            MaxMpxCount = 2,
            VcNumber = 1,
            SessionKey = 0x00000000,
            Capabilities = Capabilities.Unicode | Capabilities.NTSMB | Capabilities.NTStatusCode | Capabilities.ExtendedSecurity,
            SecurityBlob = securityBlob,
            NativeOS = "Unix",
            NativeLanMan = "Samba",
        };


        byte[] expectedBytes = [
            0x0c, // Word Count
            0xff, // AndXCommand
            0x00, // Reserved
            0x00, 0x00, // AndXOffset
            0xff, 0xff, // MaxBufferSize
            0x02, 0x00, // MaxMpxCount
            0x01, 0x00, // VcNumber
            0x00, 0x00, 0x00, 0x00, // SessionKey
            0x4f, 0x00, // SecurityBlobLength
            0x00, 0x00, 0x00, 0x00, // Reserved
            0x54, 0x00, 0x00, 0x80, // Capabilities
            0x65, 0x00, // ByteCount
            ..securityBlob,
            0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x78, 0x00, 0x00, 0x00, // Native OS
            0x53, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x62, 0x00, 0x61, 0x00, 0x00, 0x00 //Native LAN Manager
        ];

        // Act
        var resultBytes = request.GetBytes(true);

        // Assert
        resultBytes.Should().Equal(expectedBytes);
    }
}
