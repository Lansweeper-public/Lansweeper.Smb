using Lansweeper.Smb.SMB1.Commands;
using Lansweeper.Smb.SMB1.Enums;

namespace Lansweeper.SMB.Tests.SMB1.Commands;

/// <remarks>
/// The byte arrays here are constructed manually based on the specification. No example packet captures were found so far.
/// </remarks>
public class SessionSetupAndXResponseShould
{
    [Test]
    public void ConstructPropertiesCorrectlyFromBuffer()
    {
        // Arrange
        byte[] buffer = [
            0x03, // Word Count
            0xff, // AndXCommand
            0x00, // Reserved
            0xf2, 0x00, // AndXOffset
            0x00, 0x00, // Action (SessionSetupAction.None)
            0xcd, 0x00, // Byte Count
            0x00, // Pad
            0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00,
            0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x54, 0x00, 0x4d, 0x00, 0x29, 0x00,
            0x20, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00,
            0x4e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x20, 0x00, 0x22, 0x00,
            0x4c, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x68, 0x00, 0x6f, 0x00,
            0x72, 0x00, 0x6e, 0x00, 0x22, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6c, 0x00,
            0x74, 0x00, 0x69, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00,
            0x20, 0x00, 0x35, 0x00, 0x32, 0x00, 0x33, 0x00, 0x31, 0x00, 0x00, 0x00, // NativeOS ("Windows (TM) Code Name "Longhorn" Ultimate 5231")
            0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00,
            0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x54, 0x00, 0x4d, 0x00, 0x29, 0x00,
            0x20, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00,
            0x4e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x20, 0x00, 0x22, 0x00,
            0x4c, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x68, 0x00, 0x6f, 0x00,
            0x72, 0x00, 0x6e, 0x00, 0x22, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6c, 0x00,
            0x74, 0x00, 0x69, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00,
            0x20, 0x00, 0x36, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x00, 0x00, // NativeLanMan ("Windows (TM) Code Name "Longhorn" Ultimate 6.0")
            0x4d, 0x00, 0x53, 0x00, 0x48, 0x00, 0x4f, 0x00, 0x4d, 0x00, 0x45, 0x00, 0x00, 0x00, // PrimaryDomain
        ];

        // Act
        var sut = new SessionSetupAndXResponse(buffer, true);

        // Assert
        sut.AndXCommand.Should().Be(CommandName.SMB_COM_NO_ANDX_COMMAND);
        sut.AndXOffset.Should().Be(242);
        sut.Action.Should().Be(SessionSetupAction.None);
        sut.NativeOS.Should().Be("Windows (TM) Code Name \"Longhorn\" Ultimate 5231");
        sut.NativeLanMan.Should().Be("Windows (TM) Code Name \"Longhorn\" Ultimate 6.0");
        sut.PrimaryDomain.Should().Be("MSHOME");
    }

    [Test]
    public void GetBytesCorrectly()
    {
        // Arrange
        byte[] expectedBytes = [
            0x03, // Word Count
            0xff, // AndXCommand
            0x00, // Reserved
            0xf2, 0x00, // AndXOffset
            0x00, 0x00, // Action (SessionSetupAction.None)
            0xcd, 0x00, // Byte Count
            0x00, // Pad
            0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00,
            0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x54, 0x00, 0x4d, 0x00, 0x29, 0x00,
            0x20, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00,
            0x4e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x20, 0x00, 0x22, 0x00,
            0x4c, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x68, 0x00, 0x6f, 0x00,
            0x72, 0x00, 0x6e, 0x00, 0x22, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6c, 0x00,
            0x74, 0x00, 0x69, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00,
            0x20, 0x00, 0x35, 0x00, 0x32, 0x00, 0x33, 0x00, 0x31, 0x00, 0x00, 0x00, // NativeOS ("Windows (TM) Code Name "Longhorn" Ultimate 5231")
            0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00,
            0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x54, 0x00, 0x4d, 0x00, 0x29, 0x00,
            0x20, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00,
            0x4e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x20, 0x00, 0x22, 0x00,
            0x4c, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x68, 0x00, 0x6f, 0x00,
            0x72, 0x00, 0x6e, 0x00, 0x22, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6c, 0x00,
            0x74, 0x00, 0x69, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00,
            0x20, 0x00, 0x36, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x00, 0x00, // NativeLanMan ("Windows (TM) Code Name "Longhorn" Ultimate 6.0")
            0x4d, 0x00, 0x53, 0x00, 0x48, 0x00, 0x4f, 0x00, 0x4d, 0x00, 0x45, 0x00, 0x00, 0x00, // PrimaryDomain
        ];

        var sut = new SessionSetupAndXResponse()
        {
            AndXCommand = CommandName.SMB_COM_NO_ANDX_COMMAND,
            AndXOffset = 242,
            Action = SessionSetupAction.None,
            NativeOS = "Windows (TM) Code Name \"Longhorn\" Ultimate 5231",
            NativeLanMan = "Windows (TM) Code Name \"Longhorn\" Ultimate 6.0",
            PrimaryDomain = "MSHOME"
        };

        // Act
        var actualBytes = sut.GetBytes(true);

        // Assert
        actualBytes.Should().Equal(expectedBytes);
    }
}
