using Lansweeper.Smb.SMB1.Commands;
using Lansweeper.Smb.SMB1.Enums;
using System;

namespace Lansweeper.SMB.Tests.SMB1.Commands;

public class SessionSetupAndXResponseExtendedShould
{
    [Test]
    public void ConstructPropertiesCorrectlyFromBuffer()
    {
        // Arrange
        byte[] securityBlob = [0xa1, 0x07, 0x30, 0x05, 0xa0, 0x03, 0x0a, 0x01, 0x00];

        byte[] buffer = [
            0x04, // Word Count
            0xff, // AndXCommand
            0x00, // Reserved
            0xf2, 0x00, // AndXOffset
            0x00, 0x00, // Action (SessionSetupAction.None)
            0x09, 0x00, // SecurityBlobLength (9 bytes)
            0xc7, 0x00, // Byte Count
            ..securityBlob, // SecurityBlob
            0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00,
            0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x54, 0x00, 0x4d, 0x00, 0x29, 0x00,
            0x20, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00,
            0x4e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x20, 0x00, 0x22, 0x00,
            0x4c, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x68, 0x00, 0x6f, 0x00,
            0x72, 0x00, 0x6e, 0x00, 0x22, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6c, 0x00,
            0x74, 0x00, 0x69, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00,
            0x20, 0x00, 0x35, 0x00, 0x32, 0x00, 0x33, 0x00, 0x31, 0x00, 0x00, 0x00, // NativeOS ("Windows (TM) Code Name "Longhorn" Ultimate 5231")
            0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00,
            0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x54, 0x00, 0x4d, 0x00, 0x29, 0x00,
            0x20, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00,
            0x4e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x20, 0x00, 0x22, 0x00,
            0x4c, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x68, 0x00, 0x6f, 0x00,
            0x72, 0x00, 0x6e, 0x00, 0x22, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6c, 0x00,
            0x74, 0x00, 0x69, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00,
            0x20, 0x00, 0x36, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x00, 0x00 // NativeLanMan ("Windows (TM) Code Name "Longhorn" Ultimate 6.0")
        ];

        // Act
        var sut = new SessionSetupAndXResponseExtended(buffer, true);

        // Assert
        sut.AndXCommand.Should().Be(CommandName.SMB_COM_NO_ANDX_COMMAND);
        sut.AndXOffset.Should().Be(242);
        sut.Action.Should().Be(SessionSetupAction.None);
        sut.SecurityBlob.Should().Equal(securityBlob);
        sut.NativeOS.Should().Be("Windows (TM) Code Name \"Longhorn\" Ultimate 5231");
        sut.NativeLanMan.Should().Be("Windows (TM) Code Name \"Longhorn\" Ultimate 6.0");
    }

    [Test]
    public void ConstructPropertiesCorrectlyFromBufferWithPrimaryDomain()
    {
        // Arrange
        byte[] securityBlob = [0xa1, 0x07, 0x30, 0x05, 0xa0, 0x03, 0x0a, 0x01, 0x00];

        byte[] buffer = [
            0x04, // Word Count
            0xff, // AndXCommand
            0x00, // Reserved
            0x00, 0x00, // AndXOffset
            0x00, 0x00, // Action (SessionSetupAction.None)
            0x09, 0x00, // SecurityBlobLength (9 bytes)
            0x3b, 0x00, // Byte Count
            ..securityBlob, // SecurityBlob
            0x55, 0x00, 0x6e, 0x00, 0x69, 0x00, 0x78, 0x00, 0x00, 0x00, // NativeOS ("Unix")
            0x53, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x62, 0x00, 0x61, 0x00, 0x20, 0x00, 0x33, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x33, 0x00, 0x32, 0x00, 0x00, 0x00, // NativeLanMan ("Samba 3.0.32")
            0x4d, 0x00, 0x53, 0x00, 0x48, 0x00, 0x4f, 0x00, 0x4d, 0x00, 0x45, 0x00, 0x00, 0x00 // PrimaryDomain ("MSHOME"), this field is not part of the specification
        ];

        // Act
        var sut = new SessionSetupAndXResponseExtended(buffer, true);

        // Assert
        sut.AndXCommand.Should().Be(CommandName.SMB_COM_NO_ANDX_COMMAND);
        sut.AndXOffset.Should().Be(0);
        sut.Action.Should().Be(SessionSetupAction.None);
        sut.SecurityBlob.Should().Equal(securityBlob);
        sut.NativeOS.Should().Be("Unix");
        sut.NativeLanMan.Should().Be("Samba 3.0.32");
        sut.PrimaryDomain.Should().Be("MSHOME");
    }

    [Test]
    public void ConsructPropertiesCorretlyFromBufferWithASCII()
    {
        byte[] securityBlob = [0xa1, 0x07, 0x30, 0x05, 0xa0, 0x03, 0x0a, 0x01, 0x00];

        byte[] buffer = [
            0x04, // Word Count
            0xff, // AndXCommand
            0x00, // Reserved
            0x8c, 0x00, // AndXOffset
            0x00, 0x00, // Action (SessionSetupAction.None)
            0x09, 0x00, // SecurityBlobLength (9 bytes)
            0x61, 0x00, // Byte Count
            ..securityBlob, // SecurityBlob
            0x57, 0x69, 0x6e, 0x64,
            0x6f, 0x77, 0x73, 0x20, 0x53, 0x65, 0x72, 0x76,
            0x65, 0x72, 0x20, 0x32, 0x30, 0x30, 0x38, 0x20,
            0x52, 0x32, 0x20, 0x53, 0x74, 0x61, 0x6e, 0x64,
            0x61, 0x72, 0x64, 0x20, 0x37, 0x36, 0x30, 0x31,
            0x20, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
            0x20, 0x50, 0x61, 0x63, 0x6b, 0x20, 0x31, 0x00, // NativeOS ("Windows Server 2008 R2 Standard 7601 Service Pack 1")
            0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20,
            0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x32,
            0x30, 0x30, 0x38, 0x20, 0x52, 0x32, 0x20, 0x53,
            0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x20,
            0x36, 0x2e, 0x31, 0x00 // NativeLanMan ("Windows Server 2008 R2 Standard 6.1")
        ];

        var sut = new SessionSetupAndXResponseExtended(buffer, false);

        // Assert
        sut.AndXCommand.Should().Be(CommandName.SMB_COM_NO_ANDX_COMMAND);
        sut.AndXOffset.Should().Be(140);
        sut.Action.Should().Be(SessionSetupAction.None);
        sut.SecurityBlob.Should().Equal(securityBlob);
        sut.NativeOS.Should().Be("Windows Server 2008 R2 Standard 7601 Service Pack 1");
        sut.NativeLanMan.Should().Be("Windows Server 2008 R2 Standard 6.1");
    }

    [Test]
    public void ConstructPropertiesCorrectlyFromBufferWithMissingNullTerminatingChar()
    {
        // Arrange
        byte[] securityBlob = [0xa1, 0x07, 0x30, 0x05, 0xa0, 0x03, 0x0a, 0x01, 0x00];

        byte[] buffer = [
            0x04, // Word Count
            0xff, // AndXCommand
            0x00, // Reserved
            0xf2, 0x00, // AndXOffset
            0x00, 0x00, // Action (SessionSetupAction.None)
            0x09, 0x00, // SecurityBlobLength (9 bytes)
            0xc6, 0x00, // Byte Count
            ..securityBlob, // SecurityBlob
            0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00,
            0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x54, 0x00, 0x4d, 0x00, 0x29, 0x00,
            0x20, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00,
            0x4e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x20, 0x00, 0x22, 0x00,
            0x4c, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x68, 0x00, 0x6f, 0x00,
            0x72, 0x00, 0x6e, 0x00, 0x22, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6c, 0x00,
            0x74, 0x00, 0x69, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00,
            0x20, 0x00, 0x35, 0x00, 0x32, 0x00, 0x33, 0x00, 0x31, 0x00, 0x00, 0x00, // NativeOS ("Windows (TM) Code Name "Longhorn" Ultimate 5231")
            0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00,
            0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x54, 0x00, 0x4d, 0x00, 0x29, 0x00,
            0x20, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00,
            0x4e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x20, 0x00, 0x22, 0x00,
            0x4c, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x68, 0x00, 0x6f, 0x00,
            0x72, 0x00, 0x6e, 0x00, 0x22, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6c, 0x00,
            0x74, 0x00, 0x69, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00,
            0x20, 0x00, 0x36, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x00 // NativeLanMan ("Windows (TM) Code Name "Longhorn" Ultimate 6.0")
        ];

        // Act
        var sut = new SessionSetupAndXResponseExtended(buffer, true);

        // Assert
        sut.AndXCommand.Should().Be(CommandName.SMB_COM_NO_ANDX_COMMAND);
        sut.AndXOffset.Should().Be(242);
        sut.Action.Should().Be(SessionSetupAction.None);
        sut.SecurityBlob.Should().Equal(securityBlob);
        sut.NativeOS.Should().Be("Windows (TM) Code Name \"Longhorn\" Ultimate 5231");
        sut.NativeLanMan.Should().Be("Windows (TM) Code Name \"Longhorn\" Ultimate 6.0");
    }

    [Test]
    public void ConstructPropertiesCorrectlyFromBufferWithMissingJunkNulls()
    {
        // Arrange
        byte[] securityBlob = [0xa1, 0x07, 0x30, 0x05, 0xa0, 0x03, 0x0a, 0x01, 0x00];

        byte[] buffer = [
            0x04, // Word Count
            0xff, // AndXCommand
            0x00, // Reserved
            0xf2, 0x00, // AndXOffset
            0x00, 0x00, // Action (SessionSetupAction.None)
            0x09, 0x00, // SecurityBlobLength (9 bytes)
            0xc9, 0x00, // Byte Count
            ..securityBlob, // SecurityBlob
            0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00,
            0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x54, 0x00, 0x4d, 0x00, 0x29, 0x00,
            0x20, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00,
            0x4e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x20, 0x00, 0x22, 0x00,
            0x4c, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x68, 0x00, 0x6f, 0x00,
            0x72, 0x00, 0x6e, 0x00, 0x22, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6c, 0x00,
            0x74, 0x00, 0x69, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00,
            0x20, 0x00, 0x35, 0x00, 0x32, 0x00, 0x33, 0x00, 0x31, 0x00, 0x00, 0x00, // NativeOS ("Windows (TM) Code Name "Longhorn" Ultimate 5231")
            0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00,
            0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x54, 0x00, 0x4d, 0x00, 0x29, 0x00,
            0x20, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00,
            0x4e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x20, 0x00, 0x22, 0x00,
            0x4c, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x68, 0x00, 0x6f, 0x00,
            0x72, 0x00, 0x6e, 0x00, 0x22, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6c, 0x00,
            0x74, 0x00, 0x69, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00,
            0x20, 0x00, 0x36, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x00, 0x00, // NativeLanMan ("Windows (TM) Code Name "Longhorn" Ultimate 6.0")
            0x00, 0x00 // Junk nulls
        ];

        // Act
        var sut = new SessionSetupAndXResponseExtended(buffer, true);

        // Assert
        sut.AndXCommand.Should().Be(CommandName.SMB_COM_NO_ANDX_COMMAND);
        sut.AndXOffset.Should().Be(242);
        sut.Action.Should().Be(SessionSetupAction.None);
        sut.SecurityBlob.Should().Equal(securityBlob);
        sut.NativeOS.Should().Be("Windows (TM) Code Name \"Longhorn\" Ultimate 5231");
        sut.NativeLanMan.Should().Be("Windows (TM) Code Name \"Longhorn\" Ultimate 6.0");
        sut.PrimaryDomain.Should().BeEmpty();
    }

    [Test]
    public void ReturnCorrectByteArrayForGetBytes()
    {
        // Arrange
        byte[] securityBlob = [0xa1, 0x07, 0x30, 0x05, 0xa0, 0x03, 0x0a, 0x01, 0x00];

        byte[] expectedBytes = [
            0x04, // Word Count
            0xff, // AndXCommand
            0x00, // Reserved
            0xf2, 0x00, // AndXOffset
            0x00, 0x00, // Action (SessionSetupAction.None)
            0x09, 0x00, // SecurityBlobLength (9 bytes)
            0xc7, 0x00, // Byte Count
            ..securityBlob, // SecurityBlob
            0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00,
            0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x54, 0x00, 0x4d, 0x00, 0x29, 0x00,
            0x20, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00,
            0x4e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x20, 0x00, 0x22, 0x00,
            0x4c, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x68, 0x00, 0x6f, 0x00,
            0x72, 0x00, 0x6e, 0x00, 0x22, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6c, 0x00,
            0x74, 0x00, 0x69, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00,
            0x20, 0x00, 0x35, 0x00, 0x32, 0x00, 0x33, 0x00, 0x31, 0x00, 0x00, 0x00, // NativeOS ("Windows (TM) Code Name "Longhorn" Ultimate 5231")
            0x57, 0x00, 0x69, 0x00, 0x6e, 0x00, 0x64, 0x00, 0x6f, 0x00, 0x77, 0x00,
            0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x54, 0x00, 0x4d, 0x00, 0x29, 0x00,
            0x20, 0x00, 0x43, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x65, 0x00, 0x20, 0x00,
            0x4e, 0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x20, 0x00, 0x22, 0x00,
            0x4c, 0x00, 0x6f, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x68, 0x00, 0x6f, 0x00,
            0x72, 0x00, 0x6e, 0x00, 0x22, 0x00, 0x20, 0x00, 0x55, 0x00, 0x6c, 0x00,
            0x74, 0x00, 0x69, 0x00, 0x6d, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00,
            0x20, 0x00, 0x36, 0x00, 0x2e, 0x00, 0x30, 0x00, 0x00, 0x00 // NativeLanMan ("Windows (TM) Code Name "Longhorn" Ultimate 6.0")
        ];

        var sut = new SessionSetupAndXResponseExtended
        {
            AndXCommand = CommandName.SMB_COM_NO_ANDX_COMMAND,
            AndXOffset = 242,
            Action = SessionSetupAction.None,
            SecurityBlob = securityBlob,
            NativeOS = "Windows (TM) Code Name \"Longhorn\" Ultimate 5231",
            NativeLanMan = "Windows (TM) Code Name \"Longhorn\" Ultimate 6.0",
        };

        // Act
        var actualBytes = sut.GetBytes(true);

        // Assert
        actualBytes.Should().Equal(expectedBytes);
    }

}
