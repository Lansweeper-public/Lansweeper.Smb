using Lansweeper.Smb.Netbios;

namespace Lansweeper.SMB.Tests.Netbios;

class NetBiosUtilsShould
{
    [TestCase("VM9             ", new byte[] { 0x20, 0x46, 0x47, 0x45, 0x4e, 0x44, 0x4a, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43 /*differs here*/, 0x41, 0x00 })]
    [TestCase("VM9            \0", new byte[] { 0x20, 0x46, 0x47, 0x45, 0x4e, 0x44, 0x4a, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x41 /*differs here*/, 0x41, 0x00 })]
    public void EncodeMessage(string name, byte[] expected)
    {
        byte[] encodedName = NetBiosUtils.EncodeName(name, string.Empty);
        encodedName.Should().Equal(expected);
    }

    [TestCase("VM9             ", new byte[] { 0x20, 0x46, 0x47, 0x45, 0x4e, 0x44, 0x4a, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43 /*differs here*/, 0x41, 0x00 })]
    [TestCase("VM9            \0", new byte[] { 0x20, 0x46, 0x47, 0x45, 0x4e, 0x44, 0x4a, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x43, 0x41, 0x41 /*differs here*/, 0x41, 0x00 })]
    public void DecodeMessage(string expected, byte[] buffer)
    {
        ReadOnlySpan<byte> span = buffer;
        string actual = NetBiosUtils.DecodeName(ref span);
        actual.Should().Be(expected);
    }
}
