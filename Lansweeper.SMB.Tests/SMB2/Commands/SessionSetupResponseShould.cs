using Lansweeper.Smb.Enums;
using Lansweeper.Smb.SMB2.Commands;
using Lansweeper.Smb.SMB2.Enums;

namespace Lansweeper.SMB.Tests.SMB2.Commands;

internal class SessionSetupResponseShould
{
    [Test]
    public void ConstructPropertiesCorrectlyFromBuffer()
    {
        byte[] securityBlob = [
          0xa1, 0x82, 0x01, 0x0b, 0x30, 0x82, 0x01, 0x07,
          0xa0, 0x03, 0x0a, 0x01, 0x01, 0xa1, 0x0c, 0x06,
          0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37,
          0x02, 0x02, 0x0a, 0xa2, 0x81, 0xf1, 0x04, 0x81,
          0xee, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50,
          0x00, 0x02, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x1e,
          0x00, 0x38, 0x00, 0x00, 0x00, 0x15, 0x82, 0x8a,
          0xe2, 0x78, 0xf8, 0xf6, 0x20, 0x6e, 0x88, 0x25,
          0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x98, 0x00, 0x98, 0x00, 0x56, 0x00, 0x00,
          0x00, 0x0a, 0x00, 0x5a, 0x29, 0x00, 0x00, 0x00,
          0x0f, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b,
          0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d,
          0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41,
          0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x02,
          0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53,
          0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50,
          0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46,
          0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51,
          0x00, 0x01, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45,
          0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f,
          0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31,
          0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55,
          0x00, 0x51, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x44,
          0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54,
          0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56,
          0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30,
          0x00, 0x55, 0x00, 0x51, 0x00, 0x03, 0x00, 0x1e,
          0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b,
          0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d,
          0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41,
          0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x07,
          0x00, 0x08, 0x00, 0x0b, 0xd7, 0xd7, 0x87, 0x85,
          0x27, 0xd2, 0x01, 0x00, 0x00, 0x00, 0x00
        ];

        byte[] buffer = [
          0xfe, 0x53, 0x4d, 0x42, 0x40, 0x00, 0x01, 0x00,
          0x16, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x01, 0x00,
          0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x15, 0x00, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x09, 0x00, 0x00, 0x00, 0x48, 0x00, 0x0f, 0x01,
          ..securityBlob
        ];

        SessionSetupResponse sut = new(buffer, Smb2Dialect.SMB311);

        sut.Header.CreditCharge.Should().Be(1);
        sut.Header.Status.Should().Be(NTStatus.STATUS_MORE_PROCESSING_REQUIRED);
        sut.Header.Credits.Should().Be(1);
        sut.Header.IsResponse.Should().BeTrue();
        sut.Header.IsAsync.Should().BeFalse();
        sut.Header.IsRelatedOperations.Should().BeFalse();
        sut.Header.IsSigned.Should().BeFalse();
        sut.Header.Priority.Should().Be(1);
        sut.Header.Command.Should().Be(Smb2CommandName.SessionSetup);
        sut.Header.MessageID.Should().Be(2);
        sut.Header.Reserved.Should().Be(0xfeff);
        sut.Header.SessionID.Should().Be(0x0000740000000015);

        sut.SessionFlags.Should().Be(SessionFlags.None);
        sut.SecurityBuffer.Should().Equal(securityBlob);
    }

    [Test]
    public void GetBytesCorrectly()
    {
        byte[] securityBlob = [
          0xa1, 0x82, 0x01, 0x0b, 0x30, 0x82, 0x01, 0x07,
          0xa0, 0x03, 0x0a, 0x01, 0x01, 0xa1, 0x0c, 0x06,
          0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0x82, 0x37,
          0x02, 0x02, 0x0a, 0xa2, 0x81, 0xf1, 0x04, 0x81,
          0xee, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53, 0x50,
          0x00, 0x02, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x1e,
          0x00, 0x38, 0x00, 0x00, 0x00, 0x15, 0x82, 0x8a,
          0xe2, 0x78, 0xf8, 0xf6, 0x20, 0x6e, 0x88, 0x25,
          0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x98, 0x00, 0x98, 0x00, 0x56, 0x00, 0x00,
          0x00, 0x0a, 0x00, 0x5a, 0x29, 0x00, 0x00, 0x00,
          0x0f, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b,
          0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d,
          0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41,
          0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x02,
          0x00, 0x1e, 0x00, 0x44, 0x00, 0x45, 0x00, 0x53,
          0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f, 0x00, 0x50,
          0x00, 0x2d, 0x00, 0x56, 0x00, 0x31, 0x00, 0x46,
          0x00, 0x41, 0x00, 0x30, 0x00, 0x55, 0x00, 0x51,
          0x00, 0x01, 0x00, 0x1e, 0x00, 0x44, 0x00, 0x45,
          0x00, 0x53, 0x00, 0x4b, 0x00, 0x54, 0x00, 0x4f,
          0x00, 0x50, 0x00, 0x2d, 0x00, 0x56, 0x00, 0x31,
          0x00, 0x46, 0x00, 0x41, 0x00, 0x30, 0x00, 0x55,
          0x00, 0x51, 0x00, 0x04, 0x00, 0x1e, 0x00, 0x44,
          0x00, 0x45, 0x00, 0x53, 0x00, 0x4b, 0x00, 0x54,
          0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d, 0x00, 0x56,
          0x00, 0x31, 0x00, 0x46, 0x00, 0x41, 0x00, 0x30,
          0x00, 0x55, 0x00, 0x51, 0x00, 0x03, 0x00, 0x1e,
          0x00, 0x44, 0x00, 0x45, 0x00, 0x53, 0x00, 0x4b,
          0x00, 0x54, 0x00, 0x4f, 0x00, 0x50, 0x00, 0x2d,
          0x00, 0x56, 0x00, 0x31, 0x00, 0x46, 0x00, 0x41,
          0x00, 0x30, 0x00, 0x55, 0x00, 0x51, 0x00, 0x07,
          0x00, 0x08, 0x00, 0x0b, 0xd7, 0xd7, 0x87, 0x85,
          0x27, 0xd2, 0x01, 0x00, 0x00, 0x00, 0x00
        ];

        byte[] expectedBytes = [
          0xfe, 0x53, 0x4d, 0x42, 0x40, 0x00, 0x01, 0x00,
          0x16, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x01, 0x00,
          0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x15, 0x00, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x09, 0x00, 0x00, 0x00, 0x48, 0x00, 0x0f, 0x01,
          ..securityBlob
        ];

        SessionSetupResponse sut = new();
        sut.Header.CreditCharge = 1;
        sut.Header.Status = NTStatus.STATUS_MORE_PROCESSING_REQUIRED;
        sut.Header.Credits = 1;
        sut.Header.Priority = 1;
        sut.Header.MessageID = 2;
        sut.Header.Reserved = 0xfeff;
        sut.Header.SessionID = 0x0000740000000015;
        sut.SessionFlags = SessionFlags.None;
        sut.SecurityBuffer = securityBlob;

        byte[] actualBytes = sut.GetBytes(Smb2Dialect.SMB311);

        actualBytes.Should().Equal(expectedBytes);
    }
}
