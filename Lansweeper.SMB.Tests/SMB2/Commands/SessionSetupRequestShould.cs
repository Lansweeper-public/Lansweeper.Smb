using Lansweeper.Smb.SMB2.Commands;
using Lansweeper.Smb.SMB2.Enums;

namespace Lansweeper.SMB.Tests.SMB2.Commands;

internal class SessionSetupRequestShould
{
    [Test]
    public void ConstructPropertiesCorrectlyFromBuffer()
    {
        byte[] securityBlob = [          
          0x60, 0x48, 0x06, 0x06, 0x2b, 0x06, 0x01, 0x05,
          0x05, 0x02, 0xa0, 0x3e, 0x30, 0x3c, 0xa0, 0x0e,
          0x30, 0x0c, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04,
          0x01, 0x82, 0x37, 0x02, 0x02, 0x0a, 0xa2, 0x2a,
          0x04, 0x28, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53,
          0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0x97, 0x82,
          0x08, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x0a, 0x00, 0x5a, 0x29, 0x00, 0x00,
          0x00, 0x0f
        ];

        byte[] buffer = [
          0xfe, 0x53, 0x4d, 0x42, 0x40, 0x00, 0x01, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1f, 0x00,
          0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x19, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x4a, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          ..securityBlob,
        ];

        SessionSetupRequest sut = new(buffer, Smb2Dialect.SMB311);

        sut.Header.CreditCharge.Should().Be(1);
        sut.Header.Credits.Should().Be(31);
        sut.Header.IsResponse.Should().BeFalse();
        sut.Header.IsAsync.Should().BeFalse();
        sut.Header.IsRelatedOperations.Should().BeFalse();
        sut.Header.IsSigned.Should().BeFalse();
        sut.Header.Priority.Should().Be(1);
        sut.Header.Command.Should().Be(Smb2CommandName.SessionSetup);
        sut.Header.MessageID.Should().Be(2);
        sut.Header.Reserved.Should().Be(0xfeff);
        sut.Flags.Should().Be(SessionSetupFlags.None);
        sut.SecurityMode.Should().Be(SecurityMode.SigningEnabled);
        sut.Capabilities.Should().Be(Capabilities.DFS);
        sut.Channel.Should().Be(0);
        sut.PreviousSessionId.Should().Be(0);
        sut.SecurityBuffer.Should().Equal(securityBlob);
    }


    [Test]
    public void GetBytesCorrectly()
    {
        byte[] securityBlob = [
          0x60, 0x48, 0x06, 0x06, 0x2b, 0x06, 0x01, 0x05,
          0x05, 0x02, 0xa0, 0x3e, 0x30, 0x3c, 0xa0, 0x0e,
          0x30, 0x0c, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04,
          0x01, 0x82, 0x37, 0x02, 0x02, 0x0a, 0xa2, 0x2a,
          0x04, 0x28, 0x4e, 0x54, 0x4c, 0x4d, 0x53, 0x53,
          0x50, 0x00, 0x01, 0x00, 0x00, 0x00, 0x97, 0x82,
          0x08, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x0a, 0x00, 0x5a, 0x29, 0x00, 0x00,
          0x00, 0x0f
        ];

        byte[] expectedBytes = [
          0xfe, 0x53, 0x4d, 0x42, 0x40, 0x00, 0x01, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x1f, 0x00,
          0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x19, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x4a, 0x00,
          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          ..securityBlob,
        ];

        SessionSetupRequest sut = new();
        sut.Header.CreditCharge = 1;
        sut.Header.Credits = 31;
        sut.Header.Priority = 1;
        sut.Header.MessageID = 2;
        sut.Header.Reserved = 0xfeff;
        sut.Flags = SessionSetupFlags.None;
        sut.SecurityMode = SecurityMode.SigningEnabled;
        sut.Capabilities = Capabilities.DFS;
        sut.Channel = 0;
        sut.PreviousSessionId = 0;
        sut.SecurityBuffer = securityBlob;

        byte[] actualBytes = sut.GetBytes(Smb2Dialect.SMB311);

        actualBytes.Should().Equal(expectedBytes);
    }
}
