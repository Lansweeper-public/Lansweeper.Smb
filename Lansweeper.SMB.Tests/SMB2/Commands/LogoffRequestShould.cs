using Lansweeper.Smb.Enums;
using Lansweeper.Smb.SMB2.Commands;
using Lansweeper.Smb.SMB2.Enums;

namespace Lansweeper.SMB.Tests.SMB2.Commands;

internal class LogoffRequestShould
{

    // TODO this is a fictional example, find an actual example
    [Test]
    public void ConstructPropertiesCorrectlyFromBuffer()
    {
        byte[] buffer = [
            0xFE,0x53,0x4D,0x42,0x40,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x04,0x00,0x00,0x00
        ];

        LogoffRequest sut = new(buffer, Smb2Dialect.SMB311);

        sut.Header.Command.Should().Be(Smb2CommandName.Logoff);
        sut.Header.IsResponse.Should().BeFalse();
        sut.Reserved.Should().Be(0);
    }


    [Test]
    public void GetBytesCorrectly()
    {
        byte[] expectedBytes = [
            0xFE,0x53,0x4D,0x42,0x40,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x02,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x04,0x00,0x00,0x00
        ];

        LogoffRequest sut = new();
        byte[] actualBytes = sut.GetBytes(Smb2Dialect.SMB311);

        actualBytes.Should().Equal(expectedBytes);
    }
}
