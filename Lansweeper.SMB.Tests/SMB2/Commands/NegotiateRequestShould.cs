using Lansweeper.Smb.SMB2.Commands;
using Lansweeper.Smb.SMB2.Commands.NegotiateContexts;
using Lansweeper.Smb.SMB2.Enums;

namespace Lansweeper.SMB.Tests.SMB2.Commands;

internal class NegotiateRequestShould
{
    static readonly byte[] EmptySignature = new byte[16];


    [Test]
    public void ConstructPropertiesCorrectlyFromBuffer()
    {
        byte[] buffer = [
              0xfe, 0x53, 0x4d, 0x42, 0x40, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x24, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00,
              0x7f, 0x00, 0x00, 0x00, 0x2d, 0x55, 0xca, 0x0e,
              0x78, 0x93, 0xe6, 0x11, 0xaa, 0xf4, 0x00, 0x0c,
              0x29, 0x03, 0xdf, 0xad, 0x70, 0x00, 0x00, 0x00,
              0x02, 0x00, 0x00, 0x00, 0x02, 0x02, 0x10, 0x02,
              0x00, 0x03, 0x02, 0x03, 0x11, 0x03, 0x00, 0x00,
              0x01, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x01, 0x00, 0x20, 0x00, 0x01, 0x00, 0x5d, 0xc2,
              0x86, 0x6b, 0xbb, 0x6d, 0x10, 0x43, 0xa8, 0x11,
              0x82, 0x32, 0xe9, 0x3d, 0x50, 0x1d, 0x51, 0xbf,
              0x4d, 0x6c, 0x05, 0x75, 0xa9, 0x55, 0x0f, 0xdd,
              0x5a, 0xa0, 0x32, 0x2a, 0xcf, 0xf1, 0x00, 0x00,
              0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x02, 0x00, 0x02, 0x00, 0x01, 0x00
            ];

        Smb2Dialect[] expectedDialects = [
            Smb2Dialect.SMB202,
            Smb2Dialect.SMB210,
            Smb2Dialect.SMB300,
            Smb2Dialect.SMB302,
            Smb2Dialect.SMB311
        ];

        byte[] expectedSalt =
        [
            0x5d, 0xc2, 0x86, 0x6b, 0xbb, 0x6d, 0x10, 0x43, 0xa8, 0x11, 0x82, 0x32, 0xe9, 0x3d, 0x50, 0x1d, 0x51, 0xbf,
            0x4d, 0x6c, 0x5, 0x75, 0xa9, 0x55, 0xf, 0xdd, 0x5a, 0xa0, 0x32, 0x2a, 0xcf, 0xf1
        ];

        NegotiateRequest sut = new(buffer);

        sut.Header.CreditCharge.Should().Be(0);
        sut.Header.ChannelSequence.Should().Be(0);
        sut.Header.ChannelSequenceReserved.Should().Be(0);
        sut.Header.Reserved.Should().Be(0xfeff);
        sut.Header.Command.Should().Be(Smb2CommandName.Negotiate);
        sut.Header.Credits.Should().Be(0);
        sut.Header.IsResponse.Should().BeFalse();
        sut.Header.IsAsync.Should().BeFalse();
        sut.Header.IsRelatedOperations.Should().BeFalse();
        sut.Header.IsSigned.Should().BeFalse();
        sut.Header.Priority.Should().Be(0);
        sut.Header.MessageID.Should().Be(1);
        sut.Header.Reserved.Should().Be(0xfeff);
        sut.Header.TreeID.Should().Be(0);
        sut.Header.SessionID.Should().Be(0);
        sut.Header.Signature.Should().Equal(EmptySignature);

        sut.SecurityMode.Should().Be(SecurityMode.SigningEnabled);
        sut.Reserved.Should().Be(0);
        sut.Capabilities.Should().Be(Capabilities.DFS | Capabilities.Leasing | Capabilities.LargeMTU | Capabilities.MultiChannel
            | Capabilities.PersistentHandles | Capabilities.DirectoryLeasing | Capabilities.Encryption);
        sut.ClientGuid.Should().Be(new Guid("0eca552d-9378-11e6-aaf4-000c2903dfad"));
        sut.Dialects.Should().Equal(expectedDialects);

        sut.NegotiateContextList.Should().HaveCount(2);

        var preAuth = sut.NegotiateContextList[0].Should().BeOfType<PreAuthIntegrityCapabilities>().Which;
        preAuth.DataLength.Should().Be(38);
        preAuth.Reserved.Should().Be(0);
        preAuth.HashAlgorithms.Should().Equal(HashAlgorithm.SHA512);
        preAuth.Salt.Should().Equal(expectedSalt);

        var encryption = sut.NegotiateContextList[1].Should().BeOfType<EncryptionCapabilities>().Which;
        encryption.DataLength.Should().Be(6);
        encryption.Ciphers.Should().Equal(CipherAlgorithm.Aes128Gcm, CipherAlgorithm.Aes128Ccm);
    }


    [Test]
    public void GetBytesCorrectly()
    {
        // Arrange
        byte[] expectedBytes = [
              0xfe, 0x53, 0x4d, 0x42, 0x40, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x24, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00,
              0x7f, 0x00, 0x00, 0x00, 0x2d, 0x55, 0xca, 0x0e,
              0x78, 0x93, 0xe6, 0x11, 0xaa, 0xf4, 0x00, 0x0c,
              0x29, 0x03, 0xdf, 0xad, 0x70, 0x00, 0x00, 0x00,
              0x02, 0x00, 0x00, 0x00, 0x02, 0x02, 0x10, 0x02,
              0x00, 0x03, 0x02, 0x03, 0x11, 0x03, 0x00, 0x00,
              0x01, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x01, 0x00, 0x20, 0x00, 0x01, 0x00, 0x5d, 0xc2,
              0x86, 0x6b, 0xbb, 0x6d, 0x10, 0x43, 0xa8, 0x11,
              0x82, 0x32, 0xe9, 0x3d, 0x50, 0x1d, 0x51, 0xbf,
              0x4d, 0x6c, 0x05, 0x75, 0xa9, 0x55, 0x0f, 0xdd,
              0x5a, 0xa0, 0x32, 0x2a, 0xcf, 0xf1, 0x00, 0x00,
              0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x02, 0x00, 0x02, 0x00, 0x01, 0x00
        ];

        Smb2Dialect[] dialects = [
            Smb2Dialect.SMB202,
            Smb2Dialect.SMB210,
            Smb2Dialect.SMB300,
            Smb2Dialect.SMB302,
            Smb2Dialect.SMB311
        ];

        byte[] preAuthSalt = [
            0x5d, 0xc2, 0x86, 0x6b, 0xbb, 0x6d, 0x10, 0x43, 0xa8, 0x11, 0x82, 0x32, 0xe9, 0x3d, 0x50, 0x1d, 0x51, 0xbf,
            0x4d, 0x6c, 0x5, 0x75, 0xa9, 0x55, 0xf, 0xdd, 0x5a, 0xa0, 0x32, 0x2a, 0xcf, 0xf1
        ];

        NegotiateRequest sut = new();
        sut.Header.MessageID = 1;
        sut.Header.Reserved = 0xfeff;

        sut.SecurityMode = SecurityMode.SigningEnabled;
        sut.Capabilities = Capabilities.DFS | Capabilities.Leasing | Capabilities.LargeMTU | Capabilities.MultiChannel
            | Capabilities.PersistentHandles | Capabilities.DirectoryLeasing | Capabilities.Encryption;
        sut.ClientGuid = new Guid("0eca552d-9378-11e6-aaf4-000c2903dfad");
        sut.Dialects.AddRange(dialects);

        PreAuthIntegrityCapabilities preAuth = new();
        preAuth.HashAlgorithms.Add(HashAlgorithm.SHA512);
        preAuth.Salt = preAuthSalt;
        sut.NegotiateContextList.Add(preAuth);

        EncryptionCapabilities encryption = new();
        encryption.Ciphers.AddRange([CipherAlgorithm.Aes128Gcm, CipherAlgorithm.Aes128Ccm]);
        sut.NegotiateContextList.Add(encryption);

        // Act
        byte[] actualBytes = sut.GetBytes(Smb2Dialect.SMB311);

        // Assert
        actualBytes.Should().Equal(expectedBytes);
    }
}
